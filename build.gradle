plugins {
    id 'fabric-loom' version '1.10.1'
    id 'maven-publish'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net/'
    }
    gradlePluginPortal()
    mavenCentral()

    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }

    maven { url "https://maven.quiltmc.org/repository/release"}

    if (stonecutter.eval(stonecutter.current.version, ">=1.20.4")) {
        maven {
            url "https://maven.nucleoid.xyz/"
            name = "Nucleoid"
        }
    }
}

println "Stonecutter version: ${stonecutter.current.version}"
println "Yarn mappings: ${property('yarn_mappings')}"

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.project}"
    mappings "net.fabricmc:yarn:${property('yarn_mappings')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('loader_version')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('fabric_version')}"

    modImplementation "dev.isxander:yet-another-config-lib:${property('yacl_version')}"
//    modApi("me.shedaniel.cloth:cloth-config-fabric:${property('cloth_config')}") {
//        exclude(group: "net.fabricmc.fabric-api")
//    }
    modApi ("com.terraformersmc:modmenu:${property('mod_menu')}")
    implementation 'com.google.code.gson:gson:2.10.1'

    if (stonecutter.current.version == "1.20.4") {
        modImplementation "eu.pb4:placeholder-api:2.4.0-pre.1+1.20.4"
    }

    if (stonecutter.current.version == "1.21.5") {
        modImplementation "eu.pb4:placeholder-api:2.6.1+1.21.5"
    }
    if (stonecutter.current.version == "1.21.6") {
        modImplementation "eu.pb4:placeholder-api:2.7.0+1.21.6"
    }
}

remapJar {
    archiveFileName = "${project.archives_base_name}-${project.version}-mc-${stonecutter.current.project}.jar"
}

def mcDep = property("mod.mc_dep").toString()

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", stonecutter.current.version
    inputs.property "loader_version", project.loader_version
    inputs.property "mcdep", mcDep
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": stonecutter.current.version,
                "loader_version": project.loader_version,
                "mcdep": mcDep
    }
}

def targetJavaVersion = stonecutter.eval(stonecutter.current.project, ">=1.20.6") ? 21 : 17

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

def modVersion = project.mod_version

tasks.register("buildAndCollect", Copy) {
    group = "build"
    from(tasks.named("remapJar").get().archiveFile)
    into(rootProject.layout.buildDirectory.file("libs/${modVersion}"))
    dependsOn("build")
}

loom {
    runConfigs.all {
        ideConfigGenerated true // Run configurations are not created for subprojects by default
        runDir "../../run" // Use a shared run folder and create separate worlds
    }
//    accessWidenerPath = project.rootProject.file("src/main/resources/aws/${stonecutter.current.project}.accesswidener")
//    accessWidenerPath = project.rootProject.file("src/main/resources/aws/1.21.4.accesswidener")
}

java {
    withSourcesJar()
    def javaVersion = stonecutter.eval(stonecutter.current.project, ">=1.20.6") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
    println "JavaVersion: " + javaVersion.toString()
    targetCompatibility = javaVersion
    sourceCompatibility = javaVersion
}


jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

publishMods {
    def modrinthToken = providers.gradleProperty("MODRINTH_API_TOKEN").orNull
    def curseforgeToken = providers.gradleProperty("CURSEFORGE_API_TOKEN").orNull
    def discordWebHook = providers.gradleProperty("DISCORD_WEBHOOK").orNull
    def dryDiscordWebHook = providers.gradleProperty("DISCORD_WEBHOOK_DRY").orNull

    def start_ver = property("mod.mc_start")
    def end_ver = property("mod.mc_end")

    MODRINTH_API_TOKEN = modrinthToken
    CURSEFORGE_API_TOKEN = curseforgeToken

    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)

    version = "${project.version}-MC-${stonecutter.current.project}"
    displayName = "Durability Visibility Options ${project.version}-MC-${stonecutter.current.project}"

    changelog = rootProject.file("CHANGELOG.md").text

    type = STABLE
    modLoaders.add("fabric")

    dryRun = true

    modrinth {
        projectId = providers.gradleProperty("publish.modrinth").get()
        accessToken = modrinthToken

        minecraftVersionRange {
            start = start_ver
            end = end_ver
        }

        requires {
            slug = "yacl"
        }
        requires {
            slug = "modmenu"
        }
    }

    curseforge {
        projectId = providers.gradleProperty("publish.curseforge").get()
        accessToken = curseforgeToken

        minecraftVersionRange {
            start = start_ver
            end = end_ver
        }

        clientRequired = true
        serverRequired = false
    }

    if (stonecutter.current.version == "1.20.4") {
        discord {
            webhookUrl = discordWebHook
            dryRunWebhookUrl = dryDiscordWebHook

            username  = "Durability Visibility Options"
            avatarUrl = "https://github.com/Danrus1100/durability_visibility_options/blob/master/src/main/resources/assets/durability_visibility_options/dvo_icon_new.png?raw=true"

            content = changelog.map{ "# " + project.version + " version here! \n\n" + rootProject.file("CHANGELOG.md").text +"\n\nhttps://modrinth.com/mod/durability_visibility_options\n\n<@&1384478840662790205>"}
        }
    }

}
