plugins {
    id 'fabric-loom' version '1.9.2'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }

    if (stonecutter.eval(stonecutter.current.version, ">=1.20.4")) {
        maven {
            url "https://maven.nucleoid.xyz/"
            name = "Nucleoid"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current.project}"
    mappings "net.fabricmc:yarn:${property('yarn_mappings')}:v2"
    modImplementation "net.fabricmc:fabric-loader:${property('loader_version')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('fabric_version')}"


    modApi("me.shedaniel.cloth:cloth-config-fabric:${property('cloth_config')}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modApi ("com.terraformersmc:modmenu:${property('mod_menu')}")
    implementation 'com.google.code.gson:gson:2.10.1'

    if (stonecutter.current.version == "1.20.4") {
        modImplementation "eu.pb4:placeholder-api:2.4.0-pre.1+1.20.4"
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", stonecutter.current.version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": stonecutter.current.version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

loom {
    runConfigs.all {
        ideConfigGenerated true // Run configurations are not created for subprojects by default
        runDir "../../run" // Use a shared run folder and create separate worlds
    }
}

java {
    withSourcesJar()
    def java = stonecutter.eval(stonecutter.current.version, ">=1.20.5") ? JavaVersion.VERSION_21
            : stonecutter.eval(stonecutter.current.version, ">=1.17") ? JavaVersion.VERSION_17
            : JavaVersion.VERSION_1_8

    targetCompatibility = java
    sourceCompatibility = java
}


jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
